/*******************************************************************************
 * ARICPP - ARI interface for C++
 * Copyright (C) 2017 Daniele Pallastrelli
 *
 * This file is part of aricpp.
 * For more information, see http://github.com/daniele77/aricpp
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/


#ifndef ARICPP_CHANNEL_H_
#define ARICPP_CHANNEL_H_

#include <string>
#include "client.h"
#include "proxy.h"
#include "terminationdtmf.h"

namespace aricpp
{


class Channel
{
public:

    enum class State
    {
        down,
        reserved,
        offhook,
        dialing,
        ring,
        ringing,
        up,
        busy,
        dialingoffhook,
        prering,
        mute,
        unknown
    };

        ///////////////////////////////////////////////////////////////
        // Direction smart enum

        // all this machinery to initialize static members in the header file

        class Direction; // forward declaration

        template<class Dummy>
        struct DirectionBase
        {
            static const Direction none;
            static const Direction both;
            static const Direction in;
            static const Direction out;
        };

        class Direction : public DirectionBase<void>
        {
        public:
            operator std::string() const { return value; }
        private:
            friend struct DirectionBase<void>;
            Direction(const char* v) : value(v) {}
            const std::string value;
        };

        ///////////////////////////////////////////////////////////////


    Channel(const Channel& rhs) = delete;
    Channel& operator=(const Channel& rhs) = delete;
    Channel(Channel&& rhs) = default;
    Channel& operator=(Channel&& rhs) = default;
    ~Channel() = default;

    Channel(Client& _client, const std::string _id, const std::string& _state = {}) :
        id(_id), client(&_client)
    {
        StateChanged(_state);
    }

    Proxy& Ring() const
    {
        return Proxy::Command("POST", "/ari/channels/"+id+"/ring", client);
    }

    Proxy& RingStop() const
    {
        return Proxy::Command("DELETE", "/ari/channels/"+id+"/ring", client);
    }

    Proxy& Mute(Direction dir=Direction::both) const
    {
        return Proxy::Command(
            "POST",
            "/ari/channels/" + id + "/mute?"
            "direction=" + static_cast<std::string>(dir),
            client
        );
    }

    Proxy& Unmute(Direction dir=Direction::both) const
    {
        return Proxy::Command(
            "DELETE",
            "/ari/channels/" + id + "/mute?"
            "direction=" + static_cast<std::string>(dir),
            client
        );
    }

    Proxy& Hold() const
    {
        return Proxy::Command("POST", "/ari/channels/"+id+"/hold", client);
    }

    Proxy& Unhold() const
    {
        return Proxy::Command("DELETE", "/ari/channels/"+id+"/hold", client);
    }

    Proxy& Silence() const
    {
        return Proxy::Command("POST", "/ari/channels/"+id+"/silence", client);
    }

    Proxy& StopSilence() const
    {
        return Proxy::Command("DELETE", "/ari/channels/"+id+"/silence", client);
    }

    Proxy& StartMoh(const std::string& mohClass={}) const
    {
        std::string query = "/ari/channels/"+id+"/moh";
        if (!mohClass.empty()) query += "?mohClass=" + mohClass;
        return Proxy::Command("POST", std::move(query), client);
    }

    Proxy& StopMoh() const
    {
        return Proxy::Command("DELETE", "/ari/channels/"+id+"/moh", client);
    }

    Proxy& Answer() const
    {
        return Proxy::Command("POST", "/ari/channels/"+id+"/answer", client);
    }

    Proxy& Hangup() const
    {
        return Proxy::Command("DELETE", "/ari/channels/"+id, client);
    }

    Proxy& Call(const std::string& endpoint, const std::string& application, const std::string& callerId) const
    {
        return Proxy::Command(
            "POST",
            "/ari/channels?"
            "endpoint=" + endpoint +
            "&app=" + application +
            "&channelId=" + id +
            "&callerId=" + callerId +
            "&timeout=-1"
            "&appArgs=internal",
            client
        );
    }

    Proxy& Redirect(const std::string& endpoint) const
    {
        return Proxy::Command(
            "POST",
            "/ari/channels/"+id+"/redirect?"
            "endpoint=" + endpoint,
            client
        );
    }

    Proxy& SendDtmf(const std::string& dtmf, int between=-1, int duration=-1, int before=-1, int after=-1) const
    {
        return Proxy::Command(
            "POST",
            "/ari/channels/"+id+"/dtmf?"
            "dtmf=" + dtmf +
            ( between < 0 ? "" : "&between=" + std::to_string(between) ) +
            ( duration < 0 ? "" : "&duration=" + std::to_string(duration) ) +
            ( before < 0 ? "" : "&before=" + std::to_string(before) ) +
            ( after < 0 ? "" : "&after=" + std::to_string(after) ),
            client
        );
    }

    Proxy& Play(const std::string& media, const std::string& lang={},
                const std::string& playbackId={}, int offsetms=-1, int skipms=-1) const
    {
        return Proxy::Command(
            "POST",
            "/ari/channels/"+id+"/play?"
            "media=" + media +
            ( lang.empty() ? "" : "&lang=" + lang ) +
            ( playbackId.empty() ? "" : "&playbackId=" + playbackId ) +
            ( offsetms < 0 ? "" : "&offsetms=" + std::to_string(offsetms) ) +
            ( skipms < 0 ? "" : "&skipms=" + std::to_string(skipms) ),
            client
        );
    }

    Proxy& Record(const std::string& name, const std::string& format,
                  int maxDurationSeconds=-1, int maxSilenceSeconds=-1,
                  const std::string& ifExists={}, bool beep=false, TerminationDtmf terminateOn=TerminationDtmf::none) const
    {
        return Proxy::Command(
            "POST",
            "/ari/channels/"+id+"/record?"
            "name=" + name +
            "&format=" + format +
            "&terminateOn=" + static_cast<std::string>(terminateOn) +
            ( beep ? "&beep=true" : "&beep=false" ) +
            ( ifExists.empty() ? "" : "&ifExists=" + ifExists ) +
            ( maxDurationSeconds < 0 ? "" : "&maxDurationSeconds=" + std::to_string(maxDurationSeconds) ) +
            ( maxSilenceSeconds < 0 ? "" : "&maxSilenceSeconds=" + std::to_string(maxSilenceSeconds) ),
            client
        );
    }

    Proxy& SetVar(const std::string& var, const std::string& value={}) const
    {
        std::string query = "/ari/channels/"+id+"/variable?variable=" + var;
        if (!value.empty()) query += "&value=" + value;
        return Proxy::Command("POST", std::move(query), client);
    }

    Proxy& Snoop(const std::string& app, Direction spy=Direction::none, Direction whisper=Direction::none, const std::string& appArgs={}, const std::string& snoopId={}) const
    {
        return Proxy::Command(
            "POST",
            "/ari/channels/"+id+"/snoop?"
            "app=" + app +
            "&spy=" + static_cast<std::string>(spy) +
            "&whisper=" + static_cast<std::string>(whisper) +
            ( appArgs.empty() ? "" : "&appArgs=" + appArgs ) +
            ( snoopId.empty() ? "" : "&snoopId=" + snoopId ),
            client
        );
    }

    const std::string& Id() const { return id; }

    bool IsDead() const { return dead; }

    State GetState() const { return state; }

    const std::string& Name() const { return name; }
    const std::string& Extension() const { return extension; }
    const std::string& CallerNum() const { return callerNum; }
    const std::string& CallerName() const { return callerName; }

private:

    friend class AriModel;
    void StasisStart( const std::string& _name, const std::string& _ext,
                      const std::string& _callerNum, const std::string& _callerName)
    {
        name = _name;
        extension = _ext;
        callerNum = _callerNum;
        callerName = _callerName;
    }
    void StateChanged(const std::string& s)
    {
        if ( s == "Down" ) state = State::down;
        else if ( s == "Rsrvd" ) state = State::reserved;
        else if ( s == "OffHook" ) state = State::offhook;
        else if ( s == "Dialing" ) state = State::dialing;
        else if ( s == "Ring" ) state = State::ring;
        else if ( s == "Ringing" ) state = State::ringing;
        else if ( s == "Up" ) state = State::up;
        else if ( s == "Busy" ) state = State::busy;
        else if ( s == "Dialing Offhook" ) state = State::dialingoffhook;
        else if ( s == "Pre-ring" ) state = State::prering;
        else if ( s == "Mute" ) state = State::mute;
        else if ( s == "Unknown" ) state = State::unknown;
        else state = State::unknown;
    }
    void Dead() { dead = true; }

    const std::string id;
    Client* client;
    bool dead = false;
    State state = State::unknown;
    std::string name;
    std::string extension;
    std::string callerNum;
    std::string callerName;
};

template<class Dummy> const Channel::Direction Channel::DirectionBase<Dummy>::none{"none"};
template<class Dummy> const Channel::Direction Channel::DirectionBase<Dummy>::both{"both"};
template<class Dummy> const Channel::Direction Channel::DirectionBase<Dummy>::in{"in"};
template<class Dummy> const Channel::Direction Channel::DirectionBase<Dummy>::out{"out"};

} // namespace

#endif
